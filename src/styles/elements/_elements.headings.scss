@use 'sass:math';
@use "sass:list";

/* ==========================================================================
   Fluid headings with modular scaling
   Source: https://www.aleksandrhovhannisyan.com/blog/fluid-type-scale-with-css-clamp/
   Github: https://github.com/AleksandrHovhannisyan/fluid-type-scale-calculator
   ========================================================================== */

// =============================================================================
// Processing headings
// =============================================================================

:root {
    @for $i from 1 through length($global-type-steps) {
        $step: list.nth($global-type-steps, $i);
        $power: $i - $global-type-base-index;
        $min: $global-min-font-size * math.pow($global-type-scale-min, $power);
        $max: $global-max-font-size * math.pow($global-type-scale-max, $power);
        --font-size-#{$step}: #{slamp($min, $max, $global-default-min-bp, $global-default-max-bp)};
    }
}

/* ==========================================================================
   #HEADINGS
   ========================================================================== */

/**
 * Simple default styles for headings 1 through 6. Anything more opinionated
 * than simple font-size changes should likely be applied via classes (see:
 * http://csswizardry.com/2016/02/managing-typography-on-large-apps/).
 */

/**
 * Generate headings rules with modular scale and vertical rhythm
 *
 * 1. https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/
 *
 */

$steps-count: length($global-type-steps);
$headings-count: 0;

@for $i from 1 through length($global-type-steps) {

    @if $i == $global-type-base-index {
        $headings-count: length($global-type-steps) - $i;

        @for $j from 1 through $headings-count {
            $step: list.nth($global-type-steps,($steps-count - ($j - 1)));

            h#{$j} {
                font-size: var(--font-size-#{$step});
                line-height: calc(2px + 2ex + 2px); /* [1] */
                margin-bottom: .65em;
            }
        }
    }
}
